TODO
====

- Draw trajectories as lines
- Allow trajectories to be turned on and off
- Draw the current position and heading for each trajectory
- Draw in the map features
- Display which features are visible along with their bearings
- Start using the visibility information to tackle a harder version of the problem

- Redo the GUI for the GroundTruthEntry program using Glade

- Make it so that values can be optional in the config file
   
Write a script to evaluate the performance of a tracker algorithm against the ground truth
    - Give error per frame
    - Square of position error. If the tracker gets visible/invisible wrong then give a fixed penalty of half the screen diagonal squared
    - Total and average error over a number of frames
    - Allow the error to be tracked over just a subset of the frames
        

DONE
====

Make a program for specifying the ground truth for buoy location (centre and radius)
    - Display frame and frame number - Done
    - go forwards and backwards - Done
    - Draw a circle and centre point to show the position and radius of the buoy
        - Create a drawing area to display the image
        - Create and update a pixel buffer for the current frame image
        - On configure and resize events we draw the pixel buffer to the drawable area
        - We also draw the circle and dot into the drawable area
        
    - Click to set buoy centre
    - Use text box to set radius
    - Save and load ground truth to and from YAML file - Done
    - Lerp between key-frames - Done

Create a simple tracker that just takes the centre of mass of orangish pixels.
    - Create variations that work with HSV, RGB and YUV colour spaces
    
    - Produce a debug window for the the tracker that highlights the tracked pixels
    - Optimise the tracker (look at producing an implementation in C) - Done - 31/12/09 (May need further optimisation for RoBoard)

Create the control script for the submarine
    - Start both Player and the control script as a service when the computer starts using Upstart
    - Allow it to be started for both the real submarine and the simulation - Done
    - Create a seperate GUI front-end for debugging

- Give the SubController script a configuration file so it can more easily be used for different roles i.e. both Sim and real world - 1/2/10
- Hook SubController up to the Position3D interface and use it to steer the submarine to the buoy - 1/2/10

- Create a player driver that uses the roboard IO library to turn the AUV left and right using PWM - 1/2/10 and 3/2/10
    - Create the driver
    - Expose the Position3D interface
    - Implement the interface

- Produce a simulated version of the submarine run that was done at the BRL 31/3/10
    - Write Python script that records a test sequence. Data that should be recorded includes
        - Camera view
        - Position and heading of sub
        - Position of buoy
        - Position and orientation of gate (position of pole 1 and 2)

- Implemented a rough and ready gradient descent solver that tries to solve a simplified version of the location problem for the submarine trajectory. By simplified I mean that at the moment it can see all landmarks at all times but I'm hopeful that it can be extended towards the much harder real life case. 16/4/2010

INSTALLATION
============

On a new computer we need the packages

git
cmake
cmake-curses-gui
libltdl-dev


To Install Player/OpenCV we need

libdc1394-22-dev
libunicap2-dev
libucil2-dev
libavformat-dev
libswscale-dev
libxine-dev
libgtk2.0-dev
libgstreamer0.10-dev
libv4l-dev
gstreamer0.10-plugins-good <--- Lots of dependancies...
gstreamer0.10-plugins-bad <--- Also a lot, seems to contain a required dependancy though
gstreamer-tools
